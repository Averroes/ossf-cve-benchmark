import * as fs from "fs";
import * as path from "path";
import { Config, Dir, File } from "./persistent-types";
import { checkUserProvidedFile, readConfigFile } from "./util";

function getDefaultConfig(root: Dir): Config {
  return {
    "config-file": undefined,
    bcves: path.resolve(path.join(root, "CVEs")),
    sources: path.resolve(path.join(root, "work", "sources")),
    results: path.resolve(path.join(root, "work", "results")),
    reports: path.resolve(path.join(root, "work", "reports")),
    export: path.resolve(path.join(root, "work", "export", "export.json")),
    tools: {},
    "canonical-repositories-root": "https://github.com/ossf-cve-benchmark"
  };
}

export type ConfigArgs = {
  config_file?: File;
  bcves?: Dir;
  sources?: Dir;
  results?: Dir;
  reports?: Dir;
  export?: File;
};
export const DEFAULT_TIMEOUT = 30 * 60 * 1000;
export function getConfig(args: ConfigArgs): Config {
  let implicitConfigFile = path.resolve("config.json");
  let configFile =
    args.config_file ||
    (fs.existsSync(implicitConfigFile) ? implicitConfigFile : undefined);

  let defaultConfigFile;
  if (configFile) {
    checkUserProvidedFile(configFile);
    defaultConfigFile = path.dirname(configFile);
  } else {
    defaultConfigFile = ".";
  }
  let defaultConfig = getDefaultConfig(defaultConfigFile);

  let providedConfig: Config = configFile
      ? readConfigFile(configFile, false)
      : undefined,
    baseConfig: Config = { ...defaultConfig, ...providedConfig },
    fullConfig: Config = {
      "config-file": configFile,
      bcves: args.bcves || baseConfig.bcves,
      sources: args.sources || baseConfig.sources,
      results: args.results || baseConfig.results,
      reports: args.reports || baseConfig.reports,
      export: args.export || baseConfig.export,
      "canonical-repositories-root": baseConfig["canonical-repositories-root"],
      tools: baseConfig.tools
    };
  Object.values(fullConfig.tools).forEach(t => {
    if (t.timeout === undefined) {
      t.timeout = DEFAULT_TIMEOUT;
    }
  });
  Object.entries(fullConfig).forEach(([k, v]) => {
    if (!v) {
      if (k === "viewerRepo" || k === "config-file") {
        return;
      }
      throw new Error(`Invalid config value for ${k}: ${JSON.stringify(v)}`);
    }
  });
  return fullConfig;
}
